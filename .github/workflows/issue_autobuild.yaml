name: Issue Autobuild Workflow

on:
  issues:
    types:
      - opened

jobs:
  check-issue-label:
    runs-on: ubuntu-latest
    outputs:
      has_label: ${{ steps.check-label.outputs.has_label }}
    steps:
      - name: Check if issue has the "docker-autobuild" label
        id: check-label
        run: |
          if jq '.[].name | select(. == "docker-autobuild")' <<< '${{ toJson(github.event.issue.labels) }}'; then
            has_label="true"
          else
            has_label="false"
          fi
          echo "has_label=$has_label" >> "$GITHUB_OUTPUT"
  autobuild-if-issue:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    needs:
      - check-issue-label
    if: ${{ needs.check-issue-label.outputs.has_label == 'true' }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to Docker.io
        uses: docker/login-action@v3
        with:
          registry: https://docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Retrieve existing version from file
        id: retrieve-version
        run: |
          existing_version=$(cat .github/autobuild_version 2>/dev/null || echo "0")
          echo "existing_version=$existing_version" >> "$GITHUB_ENV"

      - name: Generate version based on Date Versioning (YYYY.MM.DD)
        id: generate-version
        run: |
          current_date=$(date +'%Y.%m.%d')
          existing_version="${{ env.existing_version }}"

          version_parts=(${existing_version//./ })
          subversion=${version_parts[3]:-0}  # Get the existing subversion or set to 0 if absent

          if [[ "$subversion" != "0" && "${existing_version%.*}" == "$current_date" ]]; then
            incremented_subversion=$((subversion + 1))
            version="${existing_version%.*}.$incremented_subversion"
          elif [[ "$existing_version" == "$current_date" ]]; then
            incremented_subversion=$((subversion + 1))
            version="$current_date.$incremented_subversion"
          else
            version="$current_date"
          fi

          echo "version=$version" >> "$GITHUB_ENV"

      - name: Save generated version to file
        id: save-version
        run: |
          echo "${{ env.version }}" > .github/autobuild_version
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .github/autobuild_version
          git commit -m "Update autobuild_version"
          git push origin "$GITHUB_REF"

      - name: Download dependencies
        run: |
          curl -o emailproxy.py https://raw.githubusercontent.com/simonrob/email-oauth2-proxy/main/emailproxy.py

      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/${{ github.repository }}:latest,docker.io/${{ github.repository }}:latest,ghcr.io/${{ github.repository }}:${{ env.version }},docker.io/${{ github.repository }}:${{ env.version }}
